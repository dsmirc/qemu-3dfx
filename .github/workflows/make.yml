name: msys2-64bit

on: [push]

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 100
    strategy:
      matrix:
        cache-name: [msys64-cache]
    env:
      MSYSTEM: MINGW64
      FF_SCRIPT_SECTIONS: '0'
      CONFIGURE_ARGS: '--target-list=x86_64-softmmu --without-default-devices -Ddebug=false -Doptimization=0'
      TEST_ARGS: '--no-suite qtest'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Clone QEMU
        run: git clone https://github.com/qemu/qemu.git


      - name: Set up MSYS2
        run: |
          Write-Output "Acquiring msys2.exe installer at $(Get-Date -Format u)"
          If ( !(Test-Path -Path msys64\var\cache ) ) {
              mkdir msys64\var\cache
          }
          Invoke-WebRequest "https://repo.msys2.org/distrib/msys2-x86_64-latest.sfx.exe.sig" -outfile "msys2.exe.sig"
          if ( Test-Path -Path msys64\var\cache\msys2.exe.sig ) {
              Write-Output "Cached installer sig" ;
              if ( ((Get-FileHash msys2.exe.sig).Hash -ne (Get-FileHash msys64\var\cache\msys2.exe.sig).Hash) ) {
                  Write-Output "Mis-matched installer sig, new installer download required" ;
                  Remove-Item -Path msys64\var\cache\msys2.exe.sig ;
                  if ( Test-Path -Path msys64\var\cache\msys2.exe ) {
                      Remove-Item -Path msys64\var\cache\msys2.exe
                  }
              } else {
                  Write-Output "Matched installer sig, cached installer still valid"
              }
          } else {
              Write-Output "No cached installer sig, new installer download required" ;
              if ( Test-Path -Path msys64\var\cache\msys2.exe ) {
                  Remove-Item -Path msys64\var\cache\msys2.exe
              }
          }
          if ( !(Test-Path -Path msys64\var\cache\msys2.exe ) ) {
              Write-Output "Fetching latest installer" ;
              Invoke-WebRequest "https://repo.msys2.org/distrib/msys2-x86_64-latest.sfx.exe" -outfile "msys64\var\cache\msys2.exe" ;
              Copy-Item -Path msys2.exe.sig -Destination msys64\var\cache\msys2.exe.sig
          } else {
              Write-Output "Using cached installer"
          }
          Write-Output "Invoking msys2.exe installer at $(Get-Date -Format u)"
          msys64\var\cache\msys2.exe -y
          ((Get-Content -path .\qemu-3dfx\qemu\msys64\etc\post-install\07-pacman-key.post -Raw) -replace '--refresh-keys', '--version') | Set-Content -Path .\qemu-3dfx\qemu\msys64\etc\post-install\07-pacman-key.post
          .\qemu\msys64\usr\bin\bash -lc "sed -i 's/^CheckSpace/#CheckSpace/g' /etc/pacman.conf"
          .\qemu\msys64\usr\bin\bash -lc 'pacman --noconfirm -Syuu'  # Core update
          .\qemu\msys64\usr\bin\bash -lc 'pacman --noconfirm -Syuu'  # Normal update
          taskkill /F /FI "MODULES eq msys-2.0.dll"

      - name: Install dependencies
        run: |
          Write-Output "Installing mingw packages at $(Get-Date -Format u)"
          .\qemu\msys64\usr\bin\bash -lc "pacman -Sy --noconfirm --needed
              bison diffutils flex
              git grep make sed
              mingw-w64-x86_64-binutils
              mingw-w64-x86_64-capstone
              mingw-w64-x86_64-ccache
              mingw-w64-x86_64-curl
              mingw-w64-x86_64-cyrus-sasl
              mingw-w64-x86_64-dtc
              mingw-w64-x86_64-gcc
              mingw-w64-x86_64-glib2
              mingw-w64-x86_64-gnutls
              mingw-w64-x86_64-gtk3
              mingw-w64-x86_64-libgcrypt
              mingw-w64-x86_64-libjpeg-turbo
              mingw-w64-x86_64-libnfs
              mingw-w64-x86_64-libpng
              mingw-w64-x86_64-libssh
              mingw-w64-x86_64-libtasn1
              mingw-w64-x86_64-libusb
              mingw-w64-x86_64-lzo2
              mingw-w64-x86_64-nettle
              mingw-w64-x86_64-ninja
              mingw-w64-x86_64-pixman
              mingw-w64-x86_64-pkgconf
              mingw-w64-x86_64-python
              mingw-w64-x86_64-SDL2
              mingw-w64-x86_64-SDL2_image
              mingw-w64-x86_64-snappy
              mingw-w64-x86_64-spice
              mingw-w64-x86_64-usbredir
              mingw-w64-x86_64-zstd"

      - name: Build
        run: |
          Write-Output "Running build at $(Get-Date -Format u)"
          $env:CHERE_INVOKING = 'yes'  # Preserve the current working directory
          $env:MSYS = 'winsymlinks:native' # Enable native Windows symlink
          $env:CCACHE_BASEDIR = "$env:CI_PROJECT_DIR"
          $env:CCACHE_DIR = "$env:CCACHE_BASEDIR/ccache"
          $env:CCACHE_MAXSIZE = "500M"
          $env:CCACHE_DEPEND = 1 # cache misses are too expensive with preprocessor mode
          $env:CC = "ccache gcc"
          cd qemu
          mkdir build
          cd build
          ..\msys64\usr\bin\bash -lc "ccache --zero-stats"
          ..\msys64\usr\bin\bash -lc "../configure --enable-fdt=system $CONFIGURE_ARGS"
          ..\msys64\usr\bin\bash -lc "make"
          ..\msys64\usr\bin\bash -lc "make check MTESTARGS='$TEST_ARGS' || { cat meson-logs/testlog.txt; exit 1; } ;"
          ..\msys64\usr\bin\bash -lc "ccache --show-stats"
          Write-Output "Finished build at $(Get-Date -Format u)"
